message LayerParameter {
	optional AUMaskBasedLandParameter au_mask_based_land_param = 1;
	optional DivisionParameter division_param = 2;
	optional CombinationParameter combination_param = 3;
	optional AlignDataTransformParameter align_data_transform_param = 4;
	optional DiceCoefLossParameter dice_coef_loss_param = 5;
}

message AUMaskBasedLandParameter {
	required uint32 img_size = 1;
	required float spatial_ratio = 2;
	required float spatial_scale = 3;
	optional string fill_type = 4 [default = "manhattan"];
	optional float fill_coeff = 5 [default = 0.075];
	optional float fill_value = 6 [default = 0];
}

message DivisionParameter {
  required uint32 width = 1;
  required uint32 height = 2;
  repeated uint32 xcoord = 3;
  repeated uint32 ycoord = 4;
}

message CombinationParameter {
  repeated uint32 xcoord = 1;
  repeated uint32 ycoord = 2;
}

message DiceCoefLossParameter {
  optional float smooth = 1 [default = 1.0];
}

message DataParameter {
  enum DB {
    LEVELDB = 0;
    LMDB = 1;
  }
  // Specify the data source.
  optional string source = 1;
  // Specify the batch size.
  optional uint32 batch_size = 4;
  // The rand_skip variable is for the data layer to skip a few data points
  // to avoid all asynchronous sgd clients to start at the same point. The skip
  // point would be set as rand_skip * rand(0,1). Note that rand_skip should not
  // be larger than the number of keys in the database.
  // DEPRECATED. Each solver accesses a different subset of the database.
  optional uint32 rand_skip = 7 [default = 0];
  optional DB backend = 8 [default = LEVELDB];
  // DEPRECATED. See TransformationParameter. For data pre-processing, we can do
  // simple scaling and subtracting the data mean, if provided. Note that the
  // mean subtraction is always carried out before scaling.
  optional float scale = 2 [default = 1];
  optional string mean_file = 3;
  // DEPRECATED. See TransformationParameter. Specify if we would like to randomly
  // crop an image.
  optional uint32 crop_size = 5 [default = 0];
  // DEPRECATED. See TransformationParameter. Specify if we want to randomly mirror
  // data.
  optional bool mirror = 6 [default = false];
  // Force the encoded image to have 3 color channels
  optional bool force_encoded_color = 9 [default = false];
  // Prefetch queue (Increase if data feeding bandwidth varies, within the
  // limit of device memory for GPU training)
  optional uint32 prefetch = 10 [default = 4];
  optional bool get_mirror_crop = 11 [default = false];
}
